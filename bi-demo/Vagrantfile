# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">= 1.6.0"

Vagrant.configure("2") do |config|

  # This is the VagrantFile for generating the xTuple Sales Demo box.

  config.vm.hostname = "xtuple-server"

  config.vm.post_up_message = "Welcome to the xTuple Server virtual environment.
  Use the command 'vagrant ssh' to access your server."

  # Set default package name when exporting
  config.package.name = "xtuple-mobile.box"

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "hashicorp/precise64"
  
  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://files.vagrantup.com/precise64.box"
  
  # set auto_update to false, if you do NOT want to check the correct
  # additions version when booting this machine
  config.vbguest.auto_update = false

  # Here we're extending the boot to give Postgres time to load
  config.vm.boot_timeout = 10000

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # Control the permissions of this file by setting owner: "root",
  # group: "root"
  #
  # We must sync with the current folder to get the vagrant_provision.sh
  # after we start
  config.vm.synced_folder ".", "/home/vagrant/scripts"
  config.vm.synced_folder "./.ssh", "/home/vagrant/scripts/.ssh"
  # Before packaging as a .box, change to:
  # config.vm.synced_folder "./.ssh", "/home/vagrant/scripts/.ssh"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network :forwarded_port, guest: 8443, host: 8443

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provider "virtualbox" do |v|
    v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
    v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]

    # Use VBoxManage to customize the VM
    # This line increases memory
    v.customize ["modifyvm", :id, "--memory", "4096"]

    # Boot the VM in Gui mode
    #v.gui = true
  end
  
  # Run install script virtual machine is created
  # This forces the script to *not* be run as sudo
  # Before packaging as a .box, change to comment so provisioner is not run again
  config.vm.provision "shell", path: "vagrant_setup.sh", privileged: "false", binary: "false"

  config.ssh.forward_agent = true
end
